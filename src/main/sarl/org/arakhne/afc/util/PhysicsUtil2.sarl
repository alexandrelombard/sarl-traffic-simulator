/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.util

import static java.lang.Math.max

/**
 * Additional physics-related tools.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
final class PhysicsUtil2 {

	private new {
	}

	/** Compute the distance that is needed by a standard object to stop its motion.
	 *
	 * @param currentSpeed is the current speed of the object.
	 * @param maxDeceleration is the positive number that represents the maximum deceleration of the mobile object.
	 * @param minDistance is the minimal distance to reply. If it is not provided, {@code 0.0} is assumed.
	 */
	static def getStoppingDistance(currentSpeed : double, maxDeceleration : double, minDistance : double = 0.0) : double {
		val sd = (currentSpeed * currentSpeed) / (2.0 * maxDeceleration)
		return max(sd, minDistance)
	}

}
