/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.util

import com.google.gson.TypeAdapter
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonToken
import com.google.gson.stream.JsonWriter

/** 
 * Adapter for serializing and de-serializing an enumerated type.
 * 
 * @param <T> the type of the enum.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class EnumJsonTypeAdapter<T extends Enum<T>> extends TypeAdapter<T> {

	val type : Class<T>

	/** Constructor.
	 *
	 * @param type is the concrete enumeration type.
	 */
	new (type : Class<T>) {
		this.type = type
	}

	override read(in : JsonReader) : T {
		if (in.peek === JsonToken::NULL) {
			in.nextNull
			return null
		}
		return in.nextString.valueOf(this.type)
	}

	override write(out : JsonWriter, value : T) : void {
		out.value(value.jsonValue)
	}

	/** Replies the string representation of the given enumerated value.
	 * 
	 * @param value the enumerated value.
	 * @return the Json representation of the given value.
	 */
	static def getJsonValue(value : Enum<?>) : String {
		if(value === null) null else "\"" + value.name + "\""
	}

	/** Parse the given string in order to extract an enumerated value of the given type.
	 *
	 * @param text the string to parse.
	 * @param type the type of the enumerated value.
	 * @param defaultValue is the value to reply if the name cannot be parsed.
	 * @return the extracted value.
	 */
	static def valueOf(text : String, type : Class<TT>, defaultValue : TT = null) : TT with TT extends Enum<TT> {
		try {
			if (!text.isNullOrEmpty) {
				var txt = text
				if (txt.startsWith("\"")) {
					txt = txt.substring(1)
				}
				if (txt.endsWith("\"")) {
					txt = txt.substring(0, txt.length - 1)
				}
				for (constant : type.enumConstants) {
					if (constant.name.equalsIgnoreCase(txt)) {
						return constant
					}
				}
			}
		} catch (exception : Throwable) {
			//
		}
		return defaultValue
	}

}
