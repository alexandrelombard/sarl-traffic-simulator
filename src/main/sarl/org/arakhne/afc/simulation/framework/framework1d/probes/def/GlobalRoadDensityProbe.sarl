/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.probes.^def

import com.opencsv.CSVWriter
import java.io.File
import java.util.List
import java.util.Random
import org.arakhne.afc.gis.location.GeoId
import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.simulation.framework.base.environment.AgentBody
import org.arakhne.afc.simulation.framework.base.fx.probes.AbstractCsvFxEnvironmentProbe
import org.arakhne.afc.simulation.framework.base.time.TimeManager
import org.arakhne.afc.simulation.framework.framework1d.environment.EnvironmentModel1d
import org.arakhne.afc.simulation.framework.framework1d.probes.Accumulator
import org.arakhne.afc.simulation.framework.framework1d.probes.Counter

import static extension org.arakhne.afc.simulation.framework.framework1d.probes.^def.ProbeUtils.*

/**
 * A probe for measuring the
 * {@link https://en.wikipedia.org/wiki/Traffic_flow#Density density of cars on a road}.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class GlobalRoadDensityProbe extends AbstractCsvFxEnvironmentProbe<EnvironmentModel1d> {

	/** Replies if the given road should be considered for the probed value computation.
	 */
	protected def getRoadFilter : (RoadSegment)=>boolean {
		null
	}

	private def density(nbBodies : int, roadLength : double) : double {
		nbBodies / roadLength
	}

	@SuppressWarnings("potential_inefficient_value_conversion")
	override probe(environment : EnvironmentModel1d, removedBodies : List<? extends AgentBody>, time : TimeManager,
		rootFolder : File, output : CSVWriter) {
		var densities = <GeoId, Pair<Double, Accumulator>>newTreeMap(null)
		var carAccumulator = new Counter
		var segmentAccumulator = new Accumulator
		environment.forEachRoadWithAgent(roadFilter) [ body, road |
			var key = road.geoId
			var pair = densities.get(key)
			if (pair === null) {
				var accumulator = new Accumulator
				pair = Pair::of(road.length, accumulator)
				densities.put(key, pair)
			}
			var width = body.bounds.width
			pair.value.increment(width)
			carAccumulator.increment
			segmentAccumulator.increment(road.length)
		]
		
		var t = time.current

		for (entry : densities.entrySet) {
			var pr = entry.value
			var acc = pr.value
			var nbBodies = acc.count
			if (nbBodies > 0) {
				var bodiesSize = acc.value
				var roadLength = pr.key
				var bodySize = bodiesSize / nbBodies
				var k = density(nbBodies, roadLength)
				var s = 1.0 / k 
				output.writeNext(#[
					t as String,
					entry.key.toGeoIdString,
					nbBodies as String,
					bodySize as String,
					roadLength as String,
					s as String,
					k as String
				],
				// No quote
				false)
				output.flushQuietly
			}
		}

		if (this.configuration.isChartsEnabled) {
			var k = rnd.nextDouble * 50.0 // density(carAccumulator.value, segmentAccumulator.value)
			addToSeries(time.current, k)
		}
	}

	val rnd = new Random
	
	def getCsvHeader : String[] {
		#[
			"t",
			"Segment Id",
			"Nb bodies (#)",
			"Body size (m)",
			"Segment length (m)",
			"Spacing (m)",
			"Density (#/m)"
		]
	}
	
}
