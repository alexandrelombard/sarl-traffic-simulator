/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.agents.destination

import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.math.geometry.d1.d.Point1d
import org.arakhne.afc.math.geometry.d2.d.Point2d

/**
 * Standard skill for testing the arrival at destination.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill StandardDestinationTester implements DestinationTester {

	val destinationDistance : double

	val destination : Point2d

	new (destinationDistance : double, destination : Point2d) {
		this.destinationDistance = destinationDistance
		this.destination = destination
	}

	override isArrived(segment : RoadSegment, position : Point1d) : boolean {
		var pt = segment.getGeoLocationForDistance(position.curvilineCoordinate)
		return pt.getDistance(this.destination) <= this.destinationDistance
	}

}
