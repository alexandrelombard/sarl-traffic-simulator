/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.fx

import io.sarl.bootstrap.SRE
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.javafx.FxViewerController
import io.sarl.lang.core.EventSpace
import java.io.File
import java.net.URL
import java.text.MessageFormat
import java.util.List
import java.util.ResourceBundle
import java.util.UUID
import javafx.application.Platform
import javafx.concurrent.Task
import javafx.fxml.FXML
import javafx.fxml.Initializable
import javafx.scene.Cursor
import javafx.scene.Node
import javafx.scene.chart.Chart
import javafx.scene.control.Tab
import javafx.scene.control.TabPane
import javafx.scene.layout.BorderPane
import javafx.stage.FileChooser
import javafx.stage.FileChooser.ExtensionFilter
import javafx.stage.Stage
import org.arakhne.afc.inputoutput.filefilter.XMLFileFilter
import org.arakhne.afc.simulation.framework.base.environment.AbstractEnvironmentAgent
import org.arakhne.afc.simulation.framework.base.events.StartSimulation
import org.arakhne.afc.simulation.framework.base.fx.preferences.AbstractFxPreferenceManager
import org.arakhne.afc.simulation.framework.base.scenario.SimulationScenario
import org.arakhne.afc.simulation.framework.base.scenario.SimulationScenarioFactory
import org.arakhne.afc.simulation.framework.base.preferences.PreferenceManagerSingleton
import org.eclipse.xtend.lib.annotations.Accessors

/** JavaFX controller.
 * 
 * @param <S> the type of the simulation scenario.
 * @param <P> the type of the preference manager.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractFxController<S extends SimulationScenario<?, ?, ?>, P extends AbstractFxPreferenceManager>
		extends FxViewerController implements Initializable {
	
	var bundle : ResourceBundle

	@Accessors(PROTECTED_GETTER)
	var scenario : S

	@FXML var viewerPane : BorderPane

	var ^space : EventSpace

	var environmentID : UUID

	var preferenceManager : P

	protected final def getBundle : ResourceBundle {
		this.bundle
	}

	protected final def getViewerPane : BorderPane {
		this.viewerPane
	}

	override initialize(location : URL, resources : ResourceBundle) {
		this.bundle = resources
	}

	protected abstract def createPreferenceManager : P

	/** Replies the preference manager. */
	protected def getPreferenceManager : P {
		if (this.preferenceManager === null) {
			this.preferenceManager = createPreferenceManager
			PreferenceManagerSingleton::singleton = this.preferenceManager
		}
		this.preferenceManager
	}

	protected def selectScenarioFile : File {
		selectFile(this.bundle.getString("OPEN_WINDOW_TITLE"), false, new XMLFileFilter().toJavaFX)
	}

	protected def selectFile(title : String, saveDialog : boolean, filter : ExtensionFilter = null) : File {
		var fileChooser = new FileChooser
		fileChooser.title = title
		if (filter !== null) {
			fileChooser.extensionFilters += filter
		}
		var prefs = getPreferenceManager
		var initialFile = prefs.lastOpenedFile
		var initialDir = prefs.lastOpenedDirectory
		fileChooser.initialDirectory = if (initialFile !== null) initialFile.parentFile else initialDir
		fileChooser.initialFileName = initialFile?.name
		var file : File
		if (saveDialog) {
			file = fileChooser.showSaveDialog(this.viewerPane.scene.window)
		} else {
			file = fileChooser.showOpenDialog(this.viewerPane.scene.window)
		}
		if (file !== null) {
			prefs.lastOpenedDirectory = file.parentFile
			prefs.lastOpenedFile = file
			prefs.sync(true)
		}
		return file
	}

	
	protected def alert(exception : Throwable) {
		Dialogs::alert(exception, this.bundle)
	}

	protected def beforeScenarioSetup {
	}

	protected def afterScenarioInit {
	}

	protected def afterScenarioSetup(error : boolean) {
	}

	protected abstract def createViewerNode(scenario : S) : Node

	protected def createChartNodes(scenario : S) : List<Chart> {
		newArrayList(scenario.charts.values)
	}

	/** Replies the type of the environment agent to be launched.
	 * 
	 * @return the type of the environment agent.
	 */
	protected abstract def getEnvironmentAgentType : Class<? extends AbstractEnvironmentAgent>

	/** Start the agent application by launching the environment agent.
	 * 
	 * @param agentType the type of the agent to launch.
	 * @return the identifier of the launched agent.
	 */
	def startEnvironmentAgent(agentType : Class<? extends AbstractEnvironmentAgent>) : UUID {
		var bootstrap = SRE::bootstrap
		if (!bootstrap.active) {
			throw new IllegalStateException
		}
		var context = bootstrap.startWithoutAgent
		this.UISpace = context.defaultSpace as OpenEventSpace
		val spaceID = UUID::randomUUID
		this.^space = context.createSpace(typeof(OpenEventSpaceSpecification), spaceID)
		this.environmentID = UUID::randomUUID
		bootstrap.startAgentWithID(agentType, this.environmentID, this.scenario, this.UISpace.spaceID.ID, spaceID)
		return this.environmentID
	}

	/** Emit a kill signal when the application is exited.
	 */
	override safeExit : void {
		try {
			super.safeExit
		} catch (exception : Exception) {
			// TODO: Is it bad to catch silently the exception at this place?
		}
		this.^space = null
		this.environmentID = null
		this.scenario = null
		this.viewerPane.children.clear
	}
	
	protected def createSetupTask(scenarioFile : File, scenarioFactory : SimulationScenarioFactory<S>) : Task<Void> {
		new Task<Void> {
			protected def call : Void throws Exception {
				beforeScenarioSetup
				AbstractFxController.this.viewerPane.scene.cursor = Cursor::WAIT
				var error = true
				try {
					AbstractFxController.this.scenario = scenarioFactory.buildSimulationScenario(
						scenarioFile, AbstractFxController.this.bundle)

					val dataPane = AbstractFxController.this.scenario.createViewerNode

					val tabPane = createChartNode

					error = false
					val nm = AbstractFxController.this.scenario.configuration.scenarioName

					getEnvironmentAgentType.startEnvironmentAgent

					Platform::runLater [
						try {
							(AbstractFxController.this.viewerPane.scene.window as Stage).title = if (nm.isNullOrEmpty) {
								AbstractFxController.this.bundle.getString("NO_TITLE")
								} else {
								MessageFormat::format(AbstractFxController.this.bundle.getString("TITLE"), nm)
								}
							assert dataPane !== null
							AbstractFxController.this.viewerPane.center = dataPane
							AbstractFxController.this.viewerPane.right = tabPane
							afterScenarioInit
						} catch (exception : Throwable) {
							exception.alert
						}
					]
				} catch (exception : Throwable) {
					exception.alert
				} finally {
					AbstractFxController.this.viewerPane.scene.cursor = Cursor::DEFAULT
					afterScenarioSetup(error)
				}
				return null
				}
			}
	}

	/** Create the nodes for the charts */
	@SuppressWarnings("potential_inefficient_value_conversion")
	protected def createChartNode : Node {
		val chartPanes = AbstractFxController.this.scenario.createChartNodes
		var tabPane0 : TabPane = null
		if (!chartPanes.isEmpty) {
			tabPane0 = new TabPane
			var i = 0
			for (chartPane : chartPanes) {
				var name = chartPane.title ?: (chartPane.id ?: i as String)
				var tab = new Tab(name, chartPane)
				tab.closable = false
				i++
				tabPane0.tabs += tab
			}
			tabPane0.prefWidth = 300
		}
		return tabPane0
	}

	@SuppressWarnings("discouraged_reference")
	protected def start(task : Task<?>) : void {
		var thread = new Thread(task)
		thread.daemon = true
		thread.start
	}

	/** Setup the simulator.
	 */
	@SuppressWarnings("discouraged_reference")
	@FXML
	protected def actionSetup : void {
		val file = selectScenarioFile
		if (file !== null) {
			var task = createSetupTask(file, createSimulationScenarioFactory)
			task.start
		}
	}

	/** Create the simulation scenario factory.
	 */
	protected abstract def createSimulationScenarioFactory : SimulationScenarioFactory<S>

	protected def beforeSimulationStart {
	}

	protected def afterSimulationStart(error : boolean) {
	}

	protected def startSimulation {
		var error = true
		try {
			beforeSimulationStart

			if (this.^space !== null && this.environmentID !== null) {
				try {
					this.^space.emit(this.environmentID, new StartSimulation)[it.ID == this.environmentID]
					error = false
				} catch (exception : Throwable) {
					exception.alert
				}
			}
		} catch (exception : Throwable) {
			exception.alert
		} finally {
			afterSimulationStart(error)
		}
	}

}
