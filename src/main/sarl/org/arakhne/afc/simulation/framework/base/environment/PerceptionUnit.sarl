/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.environment

import org.arakhne.afc.math.geometry.IntersectionType
import org.arakhne.afc.vmutil.json.JsonableObject
import org.arakhne.afc.vmutil.json.JsonBuffer
import org.eclipse.xtend.lib.annotations.Accessors

/**
 * This class is a unit of perception that is computed by the agent frustum culling iterator.
 *
 * @param <D> the type of the entities.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class PerceptionUnit<D> implements JsonableObject {

	@Accessors(PUBLIC_GETTER)
	val perceivedObject : D

	@Accessors(PUBLIC_GETTER)
	val intersectionType : IntersectionType 

	/** Constructor.
	 * @param type the intersection type.
	 * @param object the perceived object that is concerned by this unit of perception.
	 */
	new (type : IntersectionType, object : D) {
		this.intersectionType = type
		this.perceivedObject = object
	}

	/** Replies if the object is visible.
	 * An object is visible if it is not outside the frustum and
	 * if it is not totally occluded.
	 * 
	 * @return <code>true</code> if the object is visible, otherwise <code>false</code>
	 */
	def isVisible : boolean {
		this.intersectionType !== IntersectionType::OUTSIDE
	}
	
	override toString : String {
		var buffer = new JsonBuffer
		toJson(buffer)
		buffer.toString
	}
	
	def toJson(buffer : JsonBuffer) {
		buffer.add("perceivedObject", getPerceivedObject)
		buffer.add("visible", isVisible)
		buffer.add("intersectionType", getIntersectionType)
	}
	
}

