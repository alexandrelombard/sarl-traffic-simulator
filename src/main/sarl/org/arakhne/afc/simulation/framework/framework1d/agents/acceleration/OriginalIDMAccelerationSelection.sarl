/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.agents.acceleration

import org.arakhne.afc.math.MathUtil

import static org.arakhne.afc.simulation.framework.framework1d.agents.acceleration.IdmModel.*

/**
 * Capacity for an agent to choose a acceleration according to the
 * {@link https://en.wikipedia.org/wiki/Intelligent_driver_model Intelligent Driver Model}.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill OriginalIDMAccelerationSelection extends AbstractAccelerationSelection {

	protected override computeObstacleDrivingAcceleration(currentSpeed : double, desiredSpeed : double,
		comfortDeceleration : double, maxAcceleration : double, maxDeceleration : double, safetyDistance : double,
		reactionTime : double, obstacleDistance : double, obstacleSpeed : double) : double {
		var acceleration = acceleration(
			safetyDistance,
			desiredSpeed,
			currentSpeed,
			DELTA,
			reactionTime,
			currentSpeed - obstacleSpeed,
			obstacleDistance,
			maxAcceleration,
			comfortDeceleration)
		return MathUtil::clamp(acceleration, -maxDeceleration, maxAcceleration)
	}

	protected override computeFreeDrivingAcceleration(currentSpeed : double, desiredSpeed : double,
		maxAcceleration : double, maxDeceleration : double) : double {
		var acceleration = standardDesiredAcceleration(maxAcceleration, currentSpeed, desiredSpeed, DELTA)
		return MathUtil::clamp(acceleration, -maxDeceleration, maxAcceleration)
	}

}

