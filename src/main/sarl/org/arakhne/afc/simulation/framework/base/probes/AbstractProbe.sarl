/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.probes

import java.lang.ref.WeakReference
import java.util.Deque
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.simulation.framework.base.config.ProbeConfig
import org.eclipse.xtend.lib.annotations.Accessors

/**
 * Abstract probe.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractProbe implements Probe {

	var probeManager : WeakReference<ProbeManager>

	var id : UUID

	@Accessors
	var name : String

	var seriesData : Deque<Point2d>
	
	protected val configuration : ProbeConfig

	/** Constructor.
	 *
	 * @param configuration the configuration of the probe.
	 */
	new (configuration : ProbeConfig) {
		this.configuration = configuration
	}

	/** Add the given point to the chart series.
	 * 
	 * @param x the x coordinate of the new point.
	 * @param y the y coordinate of the new point.
	 */
	protected synchronized def addToSeries(x : double, y : double) {
		if (this.seriesData === null) {
			this.seriesData = newLinkedList
		}
		this.seriesData += new Point2d(x, y)
	}

	/** Replies the data to put into series.
	 * 
	 * @return the data.
	 */
	protected synchronized def consumeSeriesData : Deque<Point2d> {
		var data = this.seriesData
		if (data === null) {
			return newLinkedList
		}
		this.seriesData = null
		return data
	}

	override getProbeManager : ProbeManager {
		this.probeManager?.get
	}

	override setProbeManager(manager : ProbeManager) {
		this.probeManager = new WeakReference(manager)
	}

	override getID : UUID {
		if (this.id === null) {
			this.id = UUID::randomUUID
		}
		return this.id
	}

	override setID(id : UUID) {
		this.id = id
	}

}
