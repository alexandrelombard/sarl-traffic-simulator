/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.probes.^def

import com.opencsv.CSVWriter
import java.io.File
import java.util.List
import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.simulation.framework.base.environment.AgentBody
import org.arakhne.afc.simulation.framework.base.fx.probes.AbstractCsvFxEnvironmentProbe
import org.arakhne.afc.simulation.framework.base.time.TimeManager
import org.arakhne.afc.simulation.framework.framework1d.environment.EnvironmentModel1d
import org.arakhne.afc.simulation.framework.framework1d.environment.MobileAgentBody

import static extension org.arakhne.afc.simulation.framework.framework1d.probes.^def.ProbeUtils.*

/**
 * A probe for counting the number of crashes per car.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class GlobalAccidentProbe extends AbstractCsvFxEnvironmentProbe<EnvironmentModel1d> {

	/** Replies if the given road should be considered for the probed value computation.
	 */
	protected def getRoadFilter : (RoadSegment)=>boolean {
		null
	}

	@SuppressWarnings("potential_inefficient_value_conversion")
	private def treatAgent(body : MobileAgentBody, road : RoadSegment, t : double, output : CSVWriter) {
		val backCrashes = body.backCrashCount
		val frontCrashes = body.frontCrashCount
		val crashes = body.crashCount
		val relativeSpeed = body.crashRelativeSpeed
		output.writeNext(#[
			t as String,
			body.UUID.toUUIDString,
			backCrashes.toString,
			frontCrashes.toString,
			crashes.toString,
			relativeSpeed.toString
		])
		output.flushQuietly
	}

	override probe(environment : EnvironmentModel1d, removedBodies : List<? extends AgentBody>, time : TimeManager,
		rootFolder : File, output : CSVWriter) {
		val t = time.current
		environment.forEachAgent(roadFilter) [ body, road |
			body.treatAgent(road, t, output)
		]
	}
	
	def getCsvHeader : String[] {
		#[
			"t",
			"Vehicle Id",
			"Cumulative Back Crashes",
			"Cumulative Front Crashes",
			"Cumulative Crashes",
			"Relative Speed"
		]
	}

}
