/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.environment

import java.util.Collection
import java.util.UUID
import org.arakhne.afc.simulation.framework.base.events.Influence
import org.arakhne.afc.simulation.framework.base.time.TimeManager

/** 
 * Model of the agent environment.
 * 
 * @param <B> the type of the agent bodies
 * @param <IA> the type of the influence applier.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractEnvironmentModel<B extends AgentBody, IA extends InfluenceApplier<B>> {

	protected val agentBodies = <UUID, B>newTreeMap(null)
	
	synchronized def getAgentBodyCount : int {
		this.agentBodies.size
	}

	synchronized def getAgentBodies : Collection<B> {
		this.agentBodies.values.unmodifiableView
	}

	synchronized def getAgentBodyFor(id : UUID) : B {
		this.agentBodies.get(id)
	}

	/** Compute the perceptions for all the agent bodies. */
	abstract def computePerceptions : void

	/** Get the influence applier. */
	protected abstract def getInfluenceApplier : IA

	/** Apply the influences from all the agent bodies.
	 *
	 * @param timeManager the manager of time.
	 * @param removable the list to be filled with the removed bodies.
	 * @return {@code true} if the simulation could be stopped; otherwise {@code false}.
	 */
	def applyInfluences(timeManager : TimeManager, removable : Collection<B>) : boolean {
		val applier = getInfluenceApplier
		applier.reset
		for (body : getAgentBodies) {
			body.applyInfluence(body.consumeInfluence, applier, timeManager, removable)
		}
		// Remove the bodies outside the loop on the bodies.
		var nbChanges = 0
		if (!removable.isEmpty) {
			for (body : removable) {
				applier.remove(body)
				nbChanges++
			}
		}
		// Finalize influence application
		nbChanges += applier.done(timeManager)
		return onPossibleEndOfSimulation(nbChanges, timeManager)
	}

	/** Invoked when the model detects a end of simulation loop during those no agent have provided an influence.
	 *
	 * @param nbChanges the number of changes for the last simulation step.
	 * @param timeManager the time configuration.
	 * @return {@code true} if the simulation could be stopped; otherwise {@code false}.
	 */
	protected def onPossibleEndOfSimulation(nbChanges : int, timeManager : TimeManager) : boolean {
		return false
	}

	/** Apply the influence for the given body.
	 *
	 * @param body the agent body on which the influence must be applied.
	 * @param influence the influence to apply to the body.
	 * @param applier the object used to change the state of the environment.
	 * @param timeManager the manager of time.
	 * @param removedBodies is the collection to fill out with the objects to remove from the bodies' list.
	 */
	abstract def applyInfluence(body : B, influence : Influence, applier : IA, timeManager : TimeManager, removedBodies :
		Collection<B>)

	/** Synchronize the views on this environment. */
	abstract def synchronizeViews

}
