/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.agents.humanevaluation

import java.util.Random
import org.arakhne.afc.simulation.framework.framework1d.preferences.PreferenceManager1d
import org.arakhne.afc.util.PhysicsUtil2

import static extension org.arakhne.afc.simulation.framework.base.preferences.PreferenceManagerSingleton.*

/** 
 * Skill for approximating several values by using a gaussian approach.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill GaussianHumanEvaluation implements HumanEvaluation {

	val random = new Random

	val speedApproximation : double

	val distanceApproximation : double

	new {
		var prefs = typeof(PreferenceManager1d).singleton
		this.speedApproximation = prefs.agentSpeedApproximation
		this.distanceApproximation = prefs.agentDistanceApproximation
	}

	override estimateSpeed(speed : double) : double {
		val rnd = this.random.nextGaussian
		return ( rnd * this.speedApproximation ) + speed
	}

	override estimateDistance(distance : double) : double {
		val rnd = this.random.nextGaussian
		return ( rnd * this.distanceApproximation ) + distance
	}

	override estimateSafeBrakingDistance(currentSpeed : double, maxDeceleration : double,
		minDistance : double) : double {
		PhysicsUtil2::getStoppingDistance(currentSpeed, maxDeceleration, minDistance).estimateDistance
	}

}
