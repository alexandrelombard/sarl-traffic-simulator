/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.fx.probes

import java.lang.ref.WeakReference
import java.util.Collection
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicBoolean
import javafx.application.Platform
import javafx.scene.chart.XYChart.Data
import javafx.scene.chart.XYChart.Series
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.simulation.framework.base.fx.controls.DynamicDataObservableList
import org.arakhne.afc.simulation.framework.base.fx.preferences.AbstractFxPreferenceManager
import org.arakhne.afc.simulation.framework.base.probes.AbstractProbe

import static extension org.arakhne.afc.simulation.framework.base.preferences.PreferenceManagerSingleton.*

/**
 * Abstract probe for JavaFX.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractFxProbe extends AbstractProbe implements FxProbe {

	var series : Series<Double, Double>

	var updater : AsynchronousUpdater

	/** Ensure that the associated series are generated. */
	protected synchronized def getDataSeries : Series<Double, Double> {
		if (this.series === null) {
			this.series = new Series(this.name, new DynamicDataObservableList)
		}
		return this.series
	}

	final override getChartSeries : Series<Double, Double> {
		getDataSeries
	}

	@SuppressWarnings("discouraged_reference")
	synchronized override startAsynchronousUpdater {
		if (this.updater === null && this.configuration.isChartsEnabled) {
			this.updater = new AsynchronousUpdater(this)
			Executors::newSingleThreadExecutor([
				var th = Executors::defaultThreadFactory.newThread(it)
				th.daemon = true
				return th
			]).submit(this.updater)
		}
	}

	synchronized override stopAsynchronousUpdater {
		if (this.updater !== null) {
			this.updater.continueJob.set(false)
			this.updater = null
		}
	}

	/** Asynchronous updater of the probe series. 
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	protected static class AsynchronousUpdater implements Runnable {

		package val continueJob = new AtomicBoolean(true)

		val parent : WeakReference<AbstractFxProbe>

		new (parent : AbstractFxProbe) {
			this.parent = new WeakReference(parent)
		}

		@SuppressWarnings("discouraged_reference")
		override run {
			Thread::currentThread.name = this.parent.get.name + " updater"
			try {
				while (this.continueJob.get) {
					val par = this.parent.get
					var data : Collection<Point2d>
					var series : Series<Double, Double>
					synchronized (par) {
						data = par.consumeSeriesData
						series = par.dataSeries
					}
					val roData = data
					val roSeries = series
					Platform::runLater [
						synchronized (roSeries) {
							var sdata = roSeries.data
							for (dt : roData) {
								sdata += new Data(dt.x, dt.y)
							}
						}
					]
					Thread::sleep(typeof(AbstractFxPreferenceManager).singleton.probePanelRefreshDelay)
				}
			} finally {
				var t = Thread::currentThread
				t.name = "Thread-" + t.id
			}
		}

	}

}
