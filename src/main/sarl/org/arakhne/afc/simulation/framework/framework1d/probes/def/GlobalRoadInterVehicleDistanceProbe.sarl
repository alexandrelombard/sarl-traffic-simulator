/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.probes.^def

import com.opencsv.CSVWriter
import java.io.File
import java.util.Comparator
import java.util.List
import org.arakhne.afc.gis.location.GeoId
import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.simulation.framework.base.environment.AgentBody
import org.arakhne.afc.simulation.framework.base.fx.probes.AbstractCsvFxEnvironmentProbe
import org.arakhne.afc.simulation.framework.base.time.TimeManager
import org.arakhne.afc.simulation.framework.framework1d.environment.EnvironmentModel1d
import org.arakhne.afc.simulation.framework.framework1d.environment.MobileAgentBody
import org.arakhne.afc.simulation.framework.framework1d.probes.StatAccumulator
import org.arakhne.afc.util.ListUtil

import static extension org.arakhne.afc.simulation.framework.framework1d.probes.^def.ProbeUtils.*

/**
 * A probe for measuring the average
 * distance between the cars on the roads.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class GlobalRoadInterVehicleDistanceProbe extends AbstractCsvFxEnvironmentProbe<EnvironmentModel1d> {

	static val COMPARATOR : Comparator<MobileAgentBody> = [a, b|
		if (a === b) return 0
		if (a === null) return -1
		if (b === null) return 1
		val pa = a.roadPosition.curvilineCoordinate
		val pb = b.roadPosition.curvilineCoordinate
		return Double.compare(pa, pb)
	]

	/** Replies if the given road should be considered for the probed value computation.
	 */
	protected def getRoadFilter : (RoadSegment)=>boolean {
		null
	}

	protected def computeDistanceInto(road : RoadSegment, acc : StatAccumulator) : void {
		var bodiesDirectionA = <MobileAgentBody>newArrayList
		var bodiesDirectionB = <MobileAgentBody>newArrayList
		for (entity : road.agentsOnRoad) {
			if (entity instanceof MobileAgentBody) {
				if (entity.directionOnRoad.isSegmentDirection) {
					ListUtil.add(bodiesDirectionA, COMPARATOR, entity, true, false)
				} else {
					ListUtil.add(bodiesDirectionB, COMPARATOR, entity, true, false)
				}
			}
		}

		if (!bodiesDirectionA.empty) {
			var a = bodiesDirectionA.get(0)
			for (var i = 1; i < bodiesDirectionA.size; i++) {
				val b = bodiesDirectionA.get(i)
				//
				val distance = a.roadPosition.getDistanceCurviline(b.roadPosition)
				acc.increment(distance)
				//
				a = b
			}
			// Last is the distance to the end of the segment.
			acc.increment(a.roadSegment.length - a.roadPosition.curvilineCoordinate)
		}

		if (!bodiesDirectionB.empty) {
			var a = bodiesDirectionB.get(0)
			for (var i = 1; i < bodiesDirectionB.size; i++) {
				val b = bodiesDirectionB.get(i)
				//
				val distance = a.roadPosition.getDistanceCurviline(b.roadPosition)
				acc.increment(distance)
				//
				a = b
			}
			// Last is the distance to the beginning of the segment.
			acc.increment(a.roadPosition.curvilineCoordinate)
		}
	}

	@SuppressWarnings("potential_inefficient_value_conversion")
	override probe(environment : EnvironmentModel1d, removedBodies : List<? extends AgentBody>, time : TimeManager,
		rootFolder : File, output : CSVWriter) {
		var data = <GeoId, StatAccumulator>newTreeMap(null)

		environment.forEachRoadWithAgent(roadFilter) [ body, road |
			var key = road.geoId
			var acc = data.get(key)
			if (acc === null) {
				acc = new StatAccumulator
				data.put(key, acc)
				road.computeDistanceInto(acc)
			}
		]
		
		var t = time.current

		for (entry : data.entrySet) {
			var acc = entry.value
			var nbBodies = acc.count
			if (nbBodies > 0) {
				output.writeNext(#[
					t as String,
					entry.key as String,
					nbBodies as String,
					acc.average as String,
					acc.stdDev as String,
					acc.min as String,
					acc.max as String
				])
				output.flushQuietly
			}
		}
	}
	
	def getCsvHeader : String[] {
		#[
			"t",
			"Segment Id",
			"Nb bodies (#)",
			"Avg distance (m)",
			"Std dev distance (m)",
			"Min distance (m)",
			"Max distance (m)"
		]
	}

}
