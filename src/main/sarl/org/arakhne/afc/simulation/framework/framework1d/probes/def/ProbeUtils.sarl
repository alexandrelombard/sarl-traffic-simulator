/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.probes.^def

import org.arakhne.afc.gis.location.GeoId
import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.simulation.framework.framework1d.environment.EnvironmentModel1d
import org.arakhne.afc.simulation.framework.framework1d.environment.MobileAgentBody
import java.util.UUID

import static extension org.arakhne.afc.simulation.framework.framework1d.environment.EnvironmentModel1d.*

/**
 * Several utilities on probes.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
final class ProbeUtils {

	private new {
	}
	
	/** Iterator on the environment roads where agents are located. */
	static def forEachRoadWithAgent(environment : EnvironmentModel1d, filter : (RoadSegment) => boolean = null,
			callback : (MobileAgentBody, RoadSegment)=>void) {
		val roads = <GeoId>newHashSet
		for (body : environment.agentBodies) {
			var road = body.roadSegment
			if (filter === null || filter.apply(road)) {
				val id = road.geoId
				if (roads.add(id)) {
					callback.apply(body, road)
				}
			}
		}
	}

	/** Iterator on the environment agents on roads.
	 */
	static def forEachAgent(environment : EnvironmentModel1d, filter : (RoadSegment)=>boolean = null,
		callback : (MobileAgentBody, RoadSegment)=>void) {
		val roads = <GeoId>newHashSet
		for (body : environment.agentBodies) {
			var road = body.roadSegment
			if (filter === null || filter.apply(road)) {
				val id = road.geoId
				if (roads.add(id)) {
					val entities = road.mobileObjects
					for (entity : entities) {
						if (entity instanceof MobileAgentBody) {
							callback.apply(body, road)
						}	
					}
				}
			}
		}
	}

	/** Replies the agents on a road.
	 */
	static def getAgentsOnRoad(road : RoadSegment) : Iterable<MobileAgentBody> {
		val mobileObjects = road.mobileObjects
		return mobileObjects.filter(typeof(MobileAgentBody))
	}

	/** Convert the GeoId to a valid CSV string.
	 */
	static def toGeoIdString(id : GeoId) : String {
		val str = id.toString
		return "\"" + str + "\""
	}

	/** Convert the UUID to a valid CSV string.
	 */
	static def toUUIDString(id : UUID) : String {
		val str = id.toString
		return "\"" + str + "\""
	}

}
