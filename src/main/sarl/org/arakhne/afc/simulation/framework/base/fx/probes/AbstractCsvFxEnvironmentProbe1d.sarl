/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.fx.probes

import com.opencsv.CSVWriter
import com.opencsv.ICSVWriter
import java.io.File
import java.io.PrintWriter
import java.util.List
import org.arakhne.afc.simulation.framework.base.config.ProbeConfig
import org.arakhne.afc.simulation.framework.base.environment.AbstractEnvironmentModel
import org.arakhne.afc.simulation.framework.base.environment.AgentBody
import org.arakhne.afc.simulation.framework.base.time.TimeManager
import org.arakhne.afc.vmutil.FileSystem

/**
 * Abstract probe with JAvaFX support within the environment that outputs a CSV data.
 * 
 * @param <E> the type of the environment.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractCsvFxEnvironmentProbe<E extends AbstractEnvironmentModel<?, ?>> extends AbstractFxEnvironmentProbe<E> {

	static val FILE_EXTENSION = ".csv"

	var output : CSVWriter

	new (config : ProbeConfig, outputFolder : File) {
		super(config)
	}

	/** Replies the basename of the file to create. */
	protected def getFileBasename : String {
		val basename = this.configuration.fileBasename
		if (basename.isNullOrEmpty) {
			return this.class.simpleName
		}
		return basename
	}

	override close {
		if (this.output !== null) {
			this.output.flush
			this.output.close
			this.output = null
		}
	}

	/** Replies the header of the CSV file. */
	abstract def getCsvHeader : String[]

	final override run(environment : E, removedBodies : List<? extends AgentBody>, time : TimeManager,
		rootFolder : File) {
		if (this.output === null) {
			var outputFile = FileSystem::addExtension(new File(rootFolder, getFileBasename), FILE_EXTENSION)
			this.output = new CSVWriter(new PrintWriter(outputFile), '\t',
				ICSVWriter::DEFAULT_QUOTE_CHARACTER, ICSVWriter::DEFAULT_ESCAPE_CHARACTER, ICSVWriter::DEFAULT_LINE_END)
			this.output.writeNext(getCsvHeader)
		}
		probe(environment, removedBodies, time, rootFolder, this.output)
	}

	/** Run the probe. */
	abstract def probe(environment : E, removedBodies : List<? extends AgentBody>, time : TimeManager,
		rootFolder : File, output : CSVWriter)

}
