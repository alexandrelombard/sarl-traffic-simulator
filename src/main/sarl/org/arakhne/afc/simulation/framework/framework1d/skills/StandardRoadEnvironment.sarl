/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.skills

import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.math.geometry.d1.Transform1D
import org.arakhne.afc.simulation.framework.base.skills.fromagent.AbstractPhysicEnvironment
import org.arakhne.afc.simulation.framework.framework1d.events.MotionInfluence
import org.arakhne.afc.gis.road.path.RoadPath

/** 
 * The agent that supports the agent environment.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill StandardRoadEnvironment extends AbstractPhysicEnvironment implements RoadEnvironment {

	def move(motion : Transform1D<RoadSegment>) {
		var mi = new MotionInfluence(motion)
		mi.emitInfluences
	}

	def move(path : RoadPath, linearAcceleration : double, lateralAcceleration : double) {
		if (path !== null && path.size >= 1) {
			var pathDirection = path.getSegmentDirectionAt(0)
			var transform = new Transform1D(
				path,
				pathDirection,
				linearAcceleration, lateralAcceleration)
			transform.move
		} else {
			doNothing
		}
	}

	def doNothing {
		var mi = new MotionInfluence(new Transform1D)
		mi.emitInfluences
	}

}
