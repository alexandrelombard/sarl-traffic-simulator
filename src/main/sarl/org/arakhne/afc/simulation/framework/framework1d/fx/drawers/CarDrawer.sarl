/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.fx.drawers

import com.sun.javafx.tk.Toolkit
import javafx.scene.paint.Color
import org.arakhne.afc.gis.road.RoadPolyline
import org.arakhne.afc.math.geometry.d2.d.OrientedRectangle2d
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import org.arakhne.afc.nodefx.LevelOfDetails
import org.arakhne.afc.nodefx.ZoomableGraphicsContext
import org.arakhne.afc.simulation.framework.framework1d.environment.MobileRoadObject

/** Drawer of a car
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class CarDrawer {

	val MARGIN = 1.0

	/** Draw a car.
	 *
	 * @param vehicle the body of the vehicle to draw.
	 * @param gc the graphical context in which the car should be drawn.
	 * @param carColor the color of the car when it is not crashed.
	 * @param crashedCarColor the color of the car when it is crashed.
	 * @param position2d utility structure for computing the position of the car
	 * @param tangent2d utility structure for computing the direction of the car
	 */
	def drawVehicle(vehicle : MobileRoadObject, gc : ZoomableGraphicsContext,
			roadSegment : RoadPolyline, carColor : Color, crashedCarColor : Color,
			position2d : Point2d, tangent2d : Vector2d) {
		gc.save
		if (vehicle.crashCount > 0) {
			gc.fill = crashedCarColor
			gc.stroke = crashedCarColor
		} else {
			gc.fill = carColor
			gc.stroke = carColor
		}
		var position = vehicle.roadPosition
		roadSegment.projectsOnPlane(position.curvilineCoordinate, position.lateralDistance, position2d, tangent2d)
		var bounds = vehicle.bounds
		var width = bounds.width
		var height = bounds.height
		var r = new OrientedRectangle2d(position2d.x, position2d.y, 1, 0, width / 2.0, height / 2.0)
		r.rotate(tangent2d.orientationAngle)

		var iterator = r.pathIterator
		gc.beginPath
		while (iterator.hasNext) {
			var cmp = iterator.next
			switch (cmp.type) {
				case MOVE_TO: {
					gc.moveTo(cmp.toX, cmp.toY)
				}
				case LINE_TO: {
					gc.lineTo(cmp.toX, cmp.toY)
				}
				case CLOSE: {
					gc.closePath
				}
				default:
					throw new IllegalStateException
			}
		}
		gc.fill()

		// Draw the name of the vehicle
		if (gc.levelOfDetails === LevelOfDetails::HIGH) {
			val name = vehicle.UUID.toString
			var nameWidth : double = Toolkit::toolkit.fontLoader.computeStringWidth(name, gc.font)
			nameWidth = gc.fx2docSize(nameWidth)
			gc.strokeText(name, r.centerX - nameWidth / 2.0, r.toBoundingBox.maxY + MARGIN)
		}
		gc.restore
	}

}
