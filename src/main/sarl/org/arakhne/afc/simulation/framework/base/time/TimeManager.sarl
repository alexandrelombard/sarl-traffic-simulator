/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2020 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.time

import java.util.concurrent.TimeUnit
import org.arakhne.afc.simulation.framework.base.config.TimeConfig
import org.arakhne.afc.simulation.framework.base.preferences.PreferenceManager
import org.arakhne.afc.vmutil.json.JsonBuffer
import org.arakhne.afc.vmutil.json.JsonableObject

import static extension org.arakhne.afc.simulation.framework.base.preferences.PreferenceManagerSingleton.*

/**
 * Time manager.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class TimeManager implements JsonableObject {

	public static val AS_SOON_AS_POSSIBLE = Double::NEGATIVE_INFINITY

	val c : TimeConfig

	var started = false

	var t : double

	var osTimeFactor : Double = null

	var previousOSTime : Double = null

	var lastOsStepDuration : double = 0.0

	
	new (config : TimeConfig) {
		this.c = config
		this.t = this.c.start
	}

	def isFinished : boolean {
		this.c.stop !== null && this.t >= this.c.stop
	}

	def doProgress : void {
		val currentOSTime = System::currentTimeMillis.convertFromTo(TimeUnit::MILLISECONDS, TimeUnit::SECONDS)
		if (!this.started) {
			this.previousOSTime = currentOSTime
			this.started = true
		} else {
			if (this.previousOSTime === null) {
				this.lastOsStepDuration = 0.0
				this.osTimeFactor = 1.0
			} else {
				this.lastOsStepDuration = currentOSTime - this.previousOSTime
				this.osTimeFactor = this.lastOsStepDuration / this.c.step
			}
			this.previousOSTime = currentOSTime
			this.t += this.c.step
		}
	}

	/** The current time in seconds. */
	def getCurrent : double {
		this.t
	}

	/** The current simulation step (dt) in seconds.
	 */
	def getDt : double {
		this.c.step
	}

	/** The current OS time factor.
	 */
	def getOSTimeFactor : double {
		if (this.osTimeFactor === null) {
			this.osTimeFactor = typeof(PreferenceManager).singleton.simulationDefaultOsTimeFactor
		}
		return this.osTimeFactor
	}

	/** The execution time for the last step.
	 */
	def getOSStepDuration : double {
		this.lastOsStepDuration
	}

	
	override toString : String {
		val buffer = new JsonBuffer
		toJson(buffer)
		super.toString()
	}

	override toJson(buffer : JsonBuffer) {
		buffer.add("t", getCurrent)
		buffer.add("dt", getDt)
		buffer.add("osTimeFactor", getOSTimeFactor)
	}

}
